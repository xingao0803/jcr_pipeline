ef user_apikey

withCredentials([string(credentialsId: 'jcr-key', variable: 'secret_text')]) {
    user_apikey = "${secret_text}"
}

node {

	def server
	def buildInfo
	def rtGradle
	def warVersion

	stage('Prepare') {
		server = Artifactory.server('arti-oss')
		buildInfo = Artifactory.newBuildInfo()
		buildInfo.env.capture = true
		rtGradle = Artifactory.newGradleBuild()
		
		jcrServer = Artifactory.server('arti-jcr')
	}

    //Configure Artifactroy repository to pull/push artifacts
    stage('Artifactory configuration') {
        rtGradle.tool = 'demo-gradle' // Tool name from Jenkins configuration
        rtGradle.deployer repo:'k8sPipeline-gradle-dev-local', server: server
        rtGradle.resolver repo:'k8sPipeline-gradle-lib-local', server: server
    }

    //Clone example code from GitHub repository
    stage('SCM') {
        //git url: 'https://github.com/xingao0803/jcr_pipeline.git', branch: 'master'
        sh "cp -r /Users/xingao/Training/jcr_pipeline/jcr_pipeline/ ."
    }

	stage('Update Version') {
	    currentVersion = "1.1.${BUILD_NUMBER}"
		sh "sed -i '' 's/-BUILD_NUMBER-/${currentVersion}/g' gradle-example/gradle.properties"
	}
    //Run gradle build
    stage('Exec Gradle') {
        if(CLEAN_REPO == "YES") {
            sh 'rm -rf ~/.gradle/caches'
        }
        rtGradle.run rootDir: "gradle-example/", buildFile: 'build.gradle', tasks: 'clean artifactoryPublish', buildInfo: buildInfo
        server.publishBuildInfo buildInfo        
    }

    stage('Exec Gradle') {
        if(CLEAN_REPO == "YES") {
            sh 'rm -rf ~/.gradle/caches'
        }
        rtGradle.run rootDir: "gradle-example/", buildFile: 'build.gradle', tasks: 'clean artifactoryPublish', buildInfo: buildInfo
        server.publishBuildInfo buildInfo        
    }

    stage('Upload WAR') {
        def uploadSpec = """{
            "files": [
                {
                    "pattern": "gradle-example/services/webservice/build/libs/webservice-1.1.${BUILD_NUMBER}.war",
                    "target": "k8sPipeline-gradle-dev-local/webservice/1.1.${BUILD_NUMBER}/webservice-1.1.${BUILD_NUMBER}.war"
                },
                {
                    "pattern": "gradle-example/services/webservice/build/poms/pom-default.xml",
                    "target": "k8sPipeline-gradle-dev-local/webservice/1.1.${BUILD_NUMBER}/webservice-1.1.${BUILD_NUMBER}.pom"
                }
            ]
        }"""

        jcrServer.upload spec: uploadSpec
    }

	stage('Function Test'){
        sh 'echo "OK!"' 
    	commandText = "curl  -H \"X-JFrog-Art-Api: ${user_apikey}\" -X PUT \"http://arti.local:9084/artifactory/api/storage/k8sPipeline-gradle-dev-local/webservice/1.1.${BUILD_NUMBER}/webservice-1.1.${BUILD_NUMBER}.war?properties=Functest=pass\" ";
	    sh commandText
        
	} 
	
	
}

