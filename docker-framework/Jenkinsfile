def user_apikey

withCredentials([string(credentialsId: <arti-apikey-credential-name>, variable: 'secret_text')]) {
    user_apikey = "${secret_text}"
}

node {
	def rtServer
	def buildInfo
	def rtDocker
	def tagName

	stage('Prepare') {
		rtServer = Artifactory.server(<arti-server-name>) //From Jenkins System config
		buildInfo = Artifactory.newBuildInfo()
		buildInfo.env.capture = true
        rtDocker = Artifactory.docker server: rtServer
        rtDocker.addProperty("unit-test","pass")
	}
	
	stage('SCM') {
        //Clone example project from GitHub repository
        git url: 'https://github.com/xingao0803/k8s_pipeline.git', branch : 'master'
	}

    //Fetch all depensencies from Artifactory
    stage('Dependencies') {
        dir('docker-framework') {
            try {
                println "Gather Java and Tomcat"

                def downloadSpec = """{
                         "files": [
                          {
                           "pattern": "k8sPipeline-generic-lib-local/java/jdk-8-linux-x64.tar.gz",
                           "target": "jdk/jdk-8-linux-x64.tar.gz",
                           "flat":"true"
                          },
                          {
                           "pattern": "k8sPipeline-generic-lib-local/org/apache/apache-tomcat/apache-tomcat-8.tar.gz",
                           "target": "tomcat/apache-tomcat-8.tar.gz",
                           "flat":"true"
                          }
                          ]
                        }"""

                rtServer.download (downloadSpec, buildInfo)
                if (fileExists('jdk/jdk-8-linux-x64.tar.gz') && fileExists('tomcat/apache-tomcat-8.tar.gz')) {
                    println "Downloaded dependencies"
                } else {
                    println "Missing Dependencies either jdk or tomcat - see listing below:"
                    sh 'ls -d */*'
                    throw new FileNotFoundException("Missing Dependencies")
                }
            } catch (Exception e) {
                println "Caught exception during resolution.  Message ${e.message}"
                throw e
            }
        }
    }
    
    //Build docker image named "docker-framework" with Java 8 and Tomcat
    stage('Build') {
        dir ('docker-framework') {
                sh "sed -i '' 's&docker.artifactory&${ARTDOCKER_REGISTRY}/${LIB_REPO}&' Dockerfile"
                tagName = "${ARTDOCKER_REGISTRY}/${DEV_REPO}/docker-framework:${env.BUILD_NUMBER}"
                println "Docker Framework Build"
                docker.build(tagName)
                println "Docker pushing -->" + tagName + " To " + DEV_REPO
                buildInfo = rtDocker.push(tagName, DEV_REPO, buildInfo)
                println "Docker Buildinfo"
                rtServer.publishBuildInfo buildInfo

        }
    }
    
    //Test docker image
    stage('Test') {
        def commandText = "curl  -H \"X-JFrog-Art-Api: ${user_apikey}\" -X PUT \"http://localhost:9081/artifactory/api/storage/${DEV_REPO}/docker-framework/${env.BUILD_NUMBER}?properties=Functest=pass;BuildTag=${env.BUILD_NUMBER}\" ";
	    sh commandText        
    }

    stage('reTagLatest') {
        dir ('docker-framework') {
                def BUILD_NUMBER = env.BUILD_NUMBER
                sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
                sh 'sed -E "s/TARGETREPO/${DEV_REPO}/" retag_out.json > retaga_out.json'
                sh 'cat retaga_out.json'
                def commandText = "curl -H \"Content-Type: application/json\" -H \"X-JFrog-Art-Api: ${user_apikey}\" -X POST \"http://localhost:9081/artifactory/api/docker/${DEV_REPO}/v2/promote\" -T retaga_out.json ";
	            sh commandText
        }
    }

    //Scan build's Artifacts in Xray
    stage('Xray Scan') {
        if (XRAY_SCAN == "YES") {
            def xrayConfig = [
                'buildName'     : env.JOB_NAME,
                'buildNumber'   : env.BUILD_NUMBER,
                'failBuild'     : false
            ]
            def xrayResults = rtServer.xrayScan xrayConfig
            echo xrayResults as String
            sleep 60
        } else {
            println "No Xray scan performed. To enable set XRAY_SCAN = YES"
        }
    }

}

