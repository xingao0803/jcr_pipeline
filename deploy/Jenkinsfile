node {

	def rtServer

	stage('Prepare') {
	    deleteDir()
	    rtServer = Artifactory.server('arti-pro')
	}

    stage('Install helm') {
        /* This installs helm client */
        try {
            println "Install helm"

            def downloadSpec = """{
                "files": [
                    {
                        "pattern": "k8sPipeline-generic-lib-local/helm/helm",
                        "target": "helm",
                        "flat":"true"
                    }
                ]
            }"""

            rtServer.download (downloadSpec)
            if (fileExists('helm')) {
                println "Downloaded helm"
            } else {
                println "Missing Tools helm - see listing below:"
                sh 'ls -l'
                throw new FileNotFoundException("Missing helm")
            }
        } catch (Exception e) {
            println "Caught exception during resolution.  Message ${e.message}"
            throw e
        }
        //sh "curl -O https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz"
        //sh "tar -xvf helm-v2.9.1-linux-amd64.tar.gz"
        sh "chmod 777 ./helm"
        sh "./helm version"
    }

    stage('Configure helm & add Artifactory repo') {
        /* Configure helm client to point to k8s cluster */
        sh './helm init --upgrade'
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'arti-credential', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
            sh "./helm repo add artifactory http://127.0.0.1:9081/artifactory/k8sPipeline-helm-lib-local --username ${env.USERNAME} --password ${env.PASSWORD}"
            sh "./helm repo update"
        }
    }

    stage('Deploy chart pulling from Artifactory') {
        /* Finally, we'll deploy the image to k8s using helm chart. */
        sh "./helm repo list"
        sh "./helm upgrade my-docker-app --install --recreate-pods artifactory/docker-app-chart"
    }
}

